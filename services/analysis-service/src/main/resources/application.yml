server:
  port: 8082

spring:
  application:
    name: analysis-service
  
  datasource:
    url: jdbc:postgresql://localhost:5433/crypto_trading
    username: crypto_user
    password: crypto_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  data:
    redis:
      host: localhost
      port: 6380
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: analysis-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.cryptotrading.analysis.dto,com.cryptotrading.dataacquisition.dto"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3

# Analysis Configuration
analysis:
  indicators:
    # Moving Average periods
    ma-periods: [5, 10, 20, 50, 100, 200]
    # RSI period
    rsi-period: 14
    # MACD parameters
    macd:
      fast-period: 12
      slow-period: 26
      signal-period: 9
    # Bollinger Bands
    bb:
      period: 20
      multiplier: 2.0
    # Stochastic
    stochastic:
      k-period: 14
      d-period: 3
  
  prediction:
    # ARIMA model parameters
    arima:
      p: 2  # autoregressive order
      d: 1  # degree of differencing
      q: 2  # moving average order
    # Neural network parameters
    neural-network:
      hidden-layers: [50, 30, 10]
      epochs: 100
      learning-rate: 0.001
      batch-size: 32
    # Prediction horizon (minutes)
    horizon: 60
    # Training data window (hours)
    training-window: 168  # 1 week
  
  cache:
    # Cache TTL for indicators (seconds)
    indicator-ttl: 300  # 5 minutes
    # Cache TTL for predictions (seconds)
    prediction-ttl: 600  # 10 minutes

# Kafka Topics
kafka:
  topics:
    # Input topics
    binance-trades: binance-trades
    coinbase-trades: coinbase-trades
    aggregated-data: aggregated-market-data
    # Output topics
    indicators: technical-indicators
    predictions: price-predictions
    analysis-alerts: analysis-alerts

# WebSocket Configuration
websocket:
  endpoint: /ws/analysis
  allowed-origins: "*"
  heartbeat-interval: 30000  # 30 seconds

# Circuit Breaker Configuration
resilience4j:
  circuitbreaker:
    instances:
      analysis-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 5s

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# Logging Configuration
logging:
  level:
    com.cryptotrading: DEBUG
    org.springframework.kafka: INFO
    org.ta4j: INFO
    org.deeplearning4j: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/analysis-service.log
