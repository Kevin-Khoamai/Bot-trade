server:
  port: 8082

spring:
  application:
    name: api-gateway
  
  # Database Configuration
  datasource:
    url: jdbc:postgresql://localhost:5433/crypto_trading
    username: crypto_user
    password: crypto_password
    driver-class-name: org.postgresql.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  
  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6380
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: api-gateway-group
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# CORS Configuration
cors:
  allowed-origins:
    - http://localhost:3000
    - http://localhost:3001
    - http://localhost:8081
    - http://localhost:8082
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE
    - OPTIONS
  allowed-headers: "*"
  allow-credentials: true

# WebSocket Configuration
websocket:
  allowed-origins:
    - http://localhost:3000
    - http://localhost:3001
    - http://localhost:8082

# Logging
logging:
  level:
    com.cryptotrading: INFO
    org.springframework.kafka: WARN
    org.springframework.web.socket: DEBUG
